version: 2
jobs:
  build:
    working_directory: /go/src/github.com/tufin/orca-operator
    docker:
      - image: tufinim/circleci-go:master
    environment:
      RELEASE: 0.1
      TAG_PREFIX: push
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate code from orca_types.go
          command: |
            operator-sdk generate k8s
      - run:
          name: Init shared ENV vars
          command: |
            echo 'export BUNDLE_DIR="deploy/olm-catalog/orca-operator"' >> $BASH_ENV
            echo 'export LATEST_DIR="$(find ${BUNDLE_DIR} -type d -name ${RELEASE%.*}* | sort | tail -n1)"' >> $BASH_ENV
            echo 'export PREV_DIR="$(find ${BUNDLE_DIR} -type d -name ${RELEASE%.*}* | sort | tail -n2 | head -n1)"' >> $BASH_ENV
            echo 'export LATEST_VER="${LATEST_DIR##*/}"' >> $BASH_ENV
            echo 'export PREV_VER="${PREV_DIR##*/}"' >> $BASH_ENV
            echo 'export BUNDLE_VER="${RELEASE}.${CIRCLE_BUILD_NUM}"' >> $BASH_ENV

            # shared functions
            echo 'export CHECK_COMMIT_MSG="$([[ $(git log -1 --pretty=%B) == *"[${TAG_PREFIX}"*" ${TAG_ACTION}"*"]" ]] && echo true)"' >> $BASH_ENV
            echo 'export TEMP_CHECK_RES="$([[ ${!TAG_SET_ENV} -z ]] && declare ${!TAG_SET_ENV}=${CHECK_COMMIT_MSG})"' >> $BASH_ENV

            source $BASH_ENV
      - run:
          name: Build operator
          command: |
            operator-sdk build tufin/orca-operator:latest --image-build-args "--build-arg version=${CIRCLE_BUILD_NUM} --build-arg release=${RELEASE}"
#            for v0.7.0+
#            operator-sdk build tufin/orca-operator:latest --docker-build-args "--build-arg version=${CIRCLE_BUILD_NUM} --build-arg release=${RELEASE}"
      - run:
          name: Generate & Validate CSV artifacts
          command: |
            echo "Creating new CSV version: ${BUNDLE_VER} from version: ${LATEST_VER}..."
            operator-sdk olm-catalog gen-csv --update-crds --from-version ${LATEST_VER} --csv-version ${BUNDLE_VER}
            # TODO: create a pull request with the Operator catalog data only in the upstream-community-operators subdirectory

            # create a dummy container which will hold a volume with config
            docker create -v /artifacts --name configs alpine:3.4 /bin/true

            # inject version
            sed "s/#VERSION#/${BUNDLE_VER}/g" deploy/olm-catalog/orca-operator.package.tmp.yaml > ${BUNDLE_DIR}/orca-operator.package.yaml

            # copy artifact files into this volume
            docker cp ${BUNDLE_DIR}/ configs:/artifacts

            docker run --volumes-from configs tufin/operator-courier operator-courier --verbose verify /artifacts/orca-operator
            docker run --volumes-from configs tufin/operator-courier operator-courier --verbose verify --ui_validate_io /artifacts/orca-operator

            # create bundle artifacts archive
            echo "Creating community OLM bundle..."
            cd ${BUNDLE_DIR}
            zip -r orca-operator-v${BUNDLE_VER}-community.zip ./*

            echo "Creating Openshift OLM bundle..."
            mkdir redhat
            for f in $(find ./ -type f -name "*.yaml"); do cp $f redhat/; done

            cd redhat
            zip -r ./../orca-operator-v${BUNDLE_VER}-redhat.zip ./*

            cd ..
            rm -rf redhat
      - store_artifacts:
          path: deploy/olm-catalog/orca-operator
          destination: catalog
      - run:
          name: Push to dockerhub
          environment:
            TAG_ACTION: docker
          command: |
            if [[ "${CHECK_COMMIT_MSG}" == "true" ]]; then
              TUFIN_PUBLISH_DOCKERHUB="true"
            fi

            if [[ "$TUFIN_PUBLISH_DOCKERHUB" != "true" ]]; then
              echo "Not pushing to docker-hub"
              exit 0
            fi

            echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
            docker tag tufin/orca-operator:latest tufin/orca-operator:${BUNDLE_VER}
            docker push tufin/orca-operator:${BUNDLE_VER}
            docker push tufin/orca-operator:latest
      - run:
          name: Push to redhat registry
          environment:
            TAG_ACTION: redhat
          command: |
            if [[ "${CHECK_COMMIT_MSG}" == "true" ]]; then
              TUFIN_PUBLISH_REDHAT="true"
            fi

            if [[ "$TUFIN_PUBLISH_REDHAT" != "true" ]]; then
              echo "Not pushing to red-hat (OLM)"
              exit 0
            fi

            echo ${REDHAT_PASS} | docker login -u unused scan.connect.redhat.com --password-stdin
            docker tag tufin/orca-operator:latest scan.connect.redhat.com/ospid-bd3f08ed-337c-4f15-8905-421a0d26ea07/orca-operator:${BUNDLE_VER}
            docker push scan.connect.redhat.com/ospid-bd3f08ed-337c-4f15-8905-421a0d26ea07/orca-operator:${BUNDLE_VER}
      - run:
          name: Push CSV to github
          environment:
            TAG_ACTION: csv
          command: |
            if [[ "${CHECK_COMMIT_MSG}" == "true" ]]; then
              TUFIN_PUSH_CSV_TO_GITHUB="true"
            fi

            if [[ "$TUFIN_PUSH_CSV_TO_GITHUB" != "true" ]]; then
              echo "Not pushing new CSV to github"
              exit 0
            fi

            git config credential.helper 'cache --timeout=120'
            git config --global user.email "rh@tufin.com"
            git config --global user.name "reuvenharrison"

            git add ${LATEST_DIR}
            git commit -m "New CSV generated '${PREV_VER}' -> '${BUNDLE_VER}' [skip ci]"
            git push -q https://${GITHUB_TOKEN}@github.com/Tufin/orca-operator.git ${CIRCLE_BRANCH}
      - run:
          name: Check set env var
          environment:
            TAG_PREFIX: test
            TAG_ACTION: env
            TAG_SET_ENV: TUFIN_SET_VAR_TEST
          command: |
            if [[ "$TUFIN_SET_VAR_TEST" == "true" ]]; then
              echo "var was set!"
              exit 0
            fi
workflows:
  version: 2
  main:
    jobs:
    - build:
        filters:
          branches:
            only: master
